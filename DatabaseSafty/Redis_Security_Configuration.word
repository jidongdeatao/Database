Redis安全加固指南

背景
Redis是互联网广泛使用的开源KV缓存数据库，但是原生Redis版本在安全方面非常薄弱，很多不满足公司安全红线要求。

范围
本规范规定了Redis缓存数据库的安全规范, 理论上适用于所有应用Redis的产品。


目录结构：
1	合法监听接口	3
  1.1	端口使用非默认端口	4
  1.2	监听地址不允许包括*	4
  1.3	隐蔽的RedisCluster端口	4
2	未公开接口	4
  2.1	账号管理(重要)	4
  2.2	Redis-cli隐藏密码	5
  2.3	Redis-cli工具使用说明	5
3	访问通道控制	6
  3.1	预共享秘钥认证(重要)	6
  3.2	认证时加上库名	7
  3.3	要在端口矩阵写明系统申请的Redis端口范围	7
  3.4	客户端认证超时时间	7
  3.5	支持SSL通信	8
  3.6	支持ACL控制	8
  3.7	Jedis客户端(TODO)	8
  3.8	集群认证问题	8
4	敏感数据与加密保护	9
  4.1	密码保存(重要)	9
  4.2	支持秘钥替换(重要)	9
  4.3	密码传输(重要)	10
  4.4	密码修改(重要)	10
5	口令安全	10
  5.1	产品缺省启用数据库口令复杂度检查功能。	10
  5.2	防暴力破解,配置账户登录失败尝试次数	10
  5.3	配置账户锁定后自动解锁时间	10
  5.4	查看锁定IP	11
  5.5	手工锁定IP的解除	11
6	日志审计	11
  6.1	安全审计	11
  6.2	操作日志转储	12
7	数据库加固	12
  7.1	使用单独的操作系统的非管理员权限帐号来运行数据库	12
  7.2	二进制文件权限控制	12
  7.3	Rdb文件权限控制	12
  7.4	Redis配置文件权限控制	12
  7.5	安全补丁要及时更新	12
8	系统保护	14
  8.1	配置数据库的最大连接数	14
  8.2	配置连接闲置超时	14
  8.3	配置最大内存	14
  9	其他高可靠相关改进	14



1	合法监听接口
     
    1.1	端口使用非默认端口
    安全问题：Redis Server监听的端口默认为6379,容易被扫描攻击。
    解决方案：修改为非默认端口，并在端口矩阵中说明。
    1.2	监听地址不允许包括*
    安全问题:Redis支持监听0.0.0.0。
    解决方案:因为如果有多网卡，应该将监听地址设置为只有数据库客户端需要连接的网卡地址。如果只允许本机访问，应该只监听127.0.0.1。

    1.3	隐蔽的RedisCluster端口
    安全问题:官方RedisCluster方案缺省会增加一个集群端口，且是在客户端端口偏移10000，这个问题非常隐蔽。
    解决方案:在端口矩阵中对额外的这个集群端口有说明。
    修改源码,新增一个redis.conf偏移量配置项cluster-port-increment，缺省配置+1，这样可以做到端口范围可控，避免冲突。

2	未公开接口
    2.1	 账号管理(重要)
    安全问题：Redis只有一个超户,权限过大。
    解决方案：权限最小化原则,增加配置项,角色区分超户,普通用户和只读用户三种。
    角色	redis.conf对应配置项	权限说明
    超户	requirepass	所有功能。
    普通用户	requireuserpass	不能进行管理类命令，如shutdown等
    只读用户	requirereaduserpass	在普通用户基础上，进一步限制只能进行读操作。没有script命令权限。


      普通用户不能进行的操作有：
      命令	解释
      save	SAVE 命令执行一个同步保存操作，将当前Redis 实例的所有数据快照(snapshot) 以RDB 文件的形式保存到硬盘。
      bgsave	在后台异步(Asynchronously) 保存当前数据库的数据到磁盘。
      bgrewriteaof	执行一个AOF 文件重写操作。重写会创建一个当前AOF 文件的体积优化版本。即使BGREWRITEAOF 执行失败，也不会有任何数据丢失，因为旧的AOF 文件在BGREWRITEAOF 成功之前不会被修改。
      shutdown	停止所有客户端 如果有至少一个保存点在等待，执行SAVE 命令 如果AOF 选项被打开，更新AOF 文件 关闭redis 服务器(server)
      sync	用于复制功能(replication) 的内部命令。
      psync	用于复制功能(replication) 的内部命令。
      replconf	暂无用处
      monitor	实时打印出Redis 服务器接收到的命令，调试用。
      slaveof	SLAVEOF 命令用于在Redis 运行时动态地修改复制(replication) 功能的行为。
      debug	调试命令
      config	配置参数
      restore	反序列化给定的序列化值，并将它和给定的key 关联。
      migrate	将key 原子性地从当前实例传送到目标实例的指定数据库上，一旦传送成功，key 保证会出现在目标实例上，而当前实例上的key 会被删除。
      dump	序列化给定key ，并返回被序列化的值，使用RESTORE 命令可以将这个值反序列化为Redis 键
      client	

    2.2	Redis-cli隐藏密码
    安全问题:通过在redis-cli指定-a参数，密码会被ps出来，属于敏感信息。
    解决方案:修改Redis源码,在main进入后，立即隐藏掉密码，避免被ps出来。(可参考开源Mysql代码)
    
    2.3	Redis-cli工具使用说明
         对于需在现网维护阶段使用的命令/参数、端口等接入方式（包括但不限于产品的生产、调测、维护用途），需通过产品资料等向客户或监管机构公开或受限公开。

    2.4	禁止在脚本中通过sudo方式切换用户执行redis-cli
    安全问题: redis-cli访问参数带密码敏感信息,会被ps出来,也容易被系统记录操作日志。
    解决方案:改为通过API方式(Python可以使用redis-py)来安全访问,禁止通过sudo方式切换到dbuser账号使用redis-cli。
    重现条件:可以通过iptables禁掉redis端口来模拟重现。

3	访问通道控制
    3.1	预共享秘钥认证(重要)
    安全问题:Redis原生认证存在重放攻击:只是简单的交互一次auth xxx
    解决方案:采用预共享秘钥(对称加密算法+随机数的双向认证)，同时在方案设计上做到最大限度兼容，让客户端改造成本最小，目前平台配套目前支持客户端有:Java,Python,C,Lua。
    方案设计如下:
    1.	Redis认证协议变更,其中auth命令区分两种功能,通过首字母区分:
    auth命令含义	区分
    认证第一阶段:客户端传递随机数	请求:auth <RAND_C
    响应:-ERR >TokenBA
    认证第二阶段	auth >TokenAB

    2.	预共享秘钥认证时序图。
      说明:Redis为文本协议, 安全随机数长度固定为32字节的可显示字符串，连接2个随机数的分隔符为”@”。
      主要认证流程:
      1.	客户端向服务端执行命令: auth <RAND_C  
      1)	首字母<表示是认证第一阶段。(便于服务端从协议层区分)
      2)	RAND_C表示客户端生成安全随机数。

      2.	服务端产生响应错误回复
      1)	获取RAND_C,并生成RAND_S
      2)	产生TokenBA=AES128(RAND_S@RAND_C)
      3)	响应错误回复:-ERR >TokenBA 
      说明:错误描述为服务端生成的安全随机数。
      3.	客户端验证
      1)	验证TokenBA是否合法
      解密出RAND_S@RAND_C，看看RAND_C是否是自己生成的随机数
      2)	客户端产生TokenAB=AES128(RAND_C@RAND_S@dbname@ossdbuser@pwd)
      3)	调用认证接口: auth >TokenAB
      4.	服务端认证
      1)	验证TokenAB是否合法
      解密出RAND_C@RAND_S，看看RAND_S是否是自己生成的随机数
      2)	验证用户和密码合法性: dbname@ossdbuser@pwd

    3.2	认证时加上库名
    存在问题:Redis没有库名,系统如果只通过用户名+密码，容易猜测和攻击。
    解决方案:通过认证时带上库名, 因为每个服务的库名都配置不同，增加攻击复杂度, 认证格式以dbname@dbuser@pwd区分。

    3.3	端口矩阵
    存在问题:Redis也是一种数据库服务，一般一个进程占用一个端口，集群还会额外多占用一个端口。
    解决方案:在端口矩阵写明系统申请的Redis端口范围。
    
    3.4	客户端认证超时时间
    存在问题:原生Redis没有限制客户端认证超时时间,存在慢攻击。
    解决方案: 修改源码,限制在60秒内认证成功，否则服务器将主动断开连接。
    说明: 控制完成客户端认证的时间上限。这可以防止无效客户端长时间占用连接通道。
    
    3.5	支持SSL通信
    安全问题：增加SSL通信可以提高数据传输的安全。
    解决方案: 
    1)不改动官方源码,通过在客户端和服务端部署SSL Proxy，类似stunnel。
    2)支持SSL可配置,涉及开源代码修改。
    说明:因为Redis属于交互密集型,每秒处理几万次请求,支持SSL后性能会有比较大损失。

    3.6	支持ACL控制
    安全问题：目前Redis没有ACL控制。
    解决方案:
    1．	目前基于平台共享秘钥，其中秘钥是随机生成，每套系统不一样，间接也做到了IP范围控制。
    2．	通过iptables控制进一步限制接入IP范围。
    3．	如果要具体控制到用户+IP级别，类似Mysql认证。作者antirez已经意识到这个问题，有望在未来版本提供，链接如下：Multi users AUTH and ACLs for Redis
    https://github.com/redis/redis-rcp/blob/master/RCP1.md

    3.7	Jedis客户端相关
    1．	存在问题:官方推荐Java客户端Jedis集群最新版还不支持认证。
    解决方案:增加认证参数，与服务端共享秘钥认证保持一致。
    2．	存在问题：Jedis认证接口密码为参数string。
    解决方案：Jedis客户端认证新增一套char[]接口。

    3.8	集群认证相关
    1. RedisCluster多主多从,内部高度自制，因此Redis的认证masterauth需要加密保存到配置文件。
    2.配置集群关系时,基于Gossip协议，Cluster meet需要有认证保护。

4	敏感数据与加密保护
    4.1	密码保存(重要)
    安全问题：原生Redis服务端密码requirepass和masterauth是明文保存到redis.conf。
    解决方案: 
    服务端密码采用PBKDF2加密后保存到redis.conf。
    考虑到性能问题，每次认证都用PBKDF2会比较耗时,经过评审，采用在首次认证成功后，内存采用SHA256缓存，后续的请求优先使用SHA256校验。

    4.2	支持秘钥替换(重要)
    安全问题：涉及加解密的秘钥不能写死到代码中。
    解决方案: 秘钥支持定期替换。
    1.	redis服务端redis-server:
    配置文件增加配置项：cipher-dir 
    配置为redis_shared.key和root.key所在的文件夹的全路径，例如：
    cipher-dir /opt/redis/etc/cipher
    2.	redis客户端：redis-cli
    添加参数-cipherdir
    指向redis_shared.key和root.key所在的文件夹的全路径
    例如：redis-cli -h 127.0.0.1 -cipherdir /opt/redis/etc/cipher -a sessionrdb@dbuser@Changeme_123 -p 32091
    3.	redis客户端SDK：jedis*.jar
    同一个进程内,Jedis接口为string, dbname@user@pwd，因为第三方接口(类似Jdbc)，无法加密。


    4.3	密码传输(重要)
    安全问题：原生Redis通过config get命令可能获取到服务端敏感信息。
    解决方案:禁止将口令等敏感信息传送到客户端,因此需要禁掉config get requirepas/masterauth/requireuserpass等功能。
    4.4	密码修改(重要)
    安全问题：修改密码明文传输:config set masterauth pwd
    解决方案:Redis内存保存明文密码问题: masterauth 使用AES128加密，密码采用AES128保存
    
5	口令安全

    5.1	产品缺省启用数据库口令复杂度检查功能
    安全问题:Redis修改密码没有复杂度检查。
    解决方案:提供单独的Redis修改工具来修改密码，特别注意以下几点。
    1．	进行口令复杂度检查。
    2．	在输入错误的用户名或密码时，不能出现类似于“密码错误”、“用户名不存在”之类的过于明确的原因提示信息，以防止攻击者用于猜解系统用户名/口令。
    3．	修改密码要校验老密码。
    4．	修改数据库密码不能和用户名一样。
    5．	交互式密码修改时要隐藏密码。
    6．	在文档中建议通过交互式修改密码。

    5.2	防暴力破解,配置账户登录失败尝试次数
    安全问题： Redis原生版本存在暴利破解情况。
    解决方案:最大失败次数：maxauthfailtimes（单位 次，有效范围(0,10万]，默认值1万）
    说明: 该配置项只支持在启动时redis.conf配置，不支持动态修改,屏蔽掉对应config set。
    不支持设置为0:表示不锁定任何IP。
    
    5.3	配置账户锁定后自动解锁时间
    鉴权失败锁定时间：authfaillocktime（单位 分钟，有效范围[0~999]，默认值10）
    设置为0时，表示永久锁定。
    说明: 该配置项只支持在启动时redis.conf配置，不支持动态修改,屏蔽掉对应config set。
    
    5.4	查看锁定IP
    问题:IP锁定后需要查看被锁定IP。
    解决方案:只有管理员可以查看已经锁定的IP列表，分隔符为英文冒号（;）
    示例1：config get lockedips
    返回：10.67.147.111;10.67.147.112;
    示例2：config get lockedips
    返回：10.67.147.111;
    说明：不支持config set lockedips，如果强制执行，返回错误：ERR Unsupported CONFIG parameter: lockedips

    5.5	手工锁定IP的解除
    只有管理员可以执行命令解锁锁定的IP，只支持解锁单个IP或者解锁全部IP
    示例1，解锁单个IP：config set unlockips 10.67.147.111
    示例2，解锁所有IP：config set unlockips “all”
    说明：不支持config get unlockips，如果强制执行，返回空，redis-cli提示：(empty list or set)
    如果参数中的IP没有出现过异常，会返回解锁失败，例如：
    (error) ERR Invalid argument '10.67.147.111' for CONFIG SET 'unlockips'

    执行手动解锁，记录trace，例如：
    例如：26 Dec 03:15:19.958 * 10.67.147.113 unlocked by 10.67.147.111:59417

6	日志审计
    6.1	安全审计
    1.	Redis自身支持日志记录到系统日志,如/var/log/localmessage。但需要通过在redis.conf进行配置。
    syslog-enabled yes
    syslog-ident redis
    syslog-facility local0
    2.	客户端登录,记录客户端IP,账号等信息。
    3.	相关维护操作必须有详细的日志记录。

    示例: 29118:S 26 Nov 11:19:29.100 * The readdbuser logged in successfully;10.145.93.119:52817;

    6.2	操作日志转储
     安全问题：官方版本Redis日志不会转储，长时间运行可能会把磁盘占满。
    解决方案:单独运行tracemonitor进程(python版),定期管理Redis日志文件大小,主要是日志压缩和定期删除,避免占用过多磁盘。
    说明:目前平台默认60秒检测一次,日志达到20M压缩,日志个数最大50个。

7	数据库加固
    7.1	使用非管理员权限帐号来运行数据库
    安全问题:使用root账号运行Redis服务有安全风险。
    解决方案:禁止使用OS超户账号运行Redis服务，应该单独建立独立的操作系统账号，如新建一个账号dbuser。
    7.2	二进制文件权限控制
    Redis二进制文件(如redis-cli/redis-server)，文件权限控制:700
    7.3	rdb文件权限控制
    生成的rdb文件还有数据内容，需要修改源码:权限改为600。
    7.4	Redis配置文件权限控制
    redis.conf由于保存敏感信息，文件权限控制:600
    7.5	安全补丁要及时更新
    近期【安全预警】Redis EVAL Lua 沙盒逃逸漏洞
      漏洞外部编码:CVE-2015-4335
      漏洞说明:这个漏洞有可能打破Redis中的Lua沙盒并且执行任意代码。 
      影响版本:Redis before 2.8.21 and 3.x before 3.0.2。
      解决方案:升级到Redis 2.8.21+和3.0.2+

      Redis官方说明: --[ Redis 2.8.21 ] Release date: 4 Jun 2015
      Upgrade urgency: HIGH for Redis because of a security issue.
                       LOW for Sentinel.

      * [FIX] Critical security issue fix by Ben Murphy: http://t.co/LpGTyZmfS7

      主要代码修改点:disable loading lua bytecode
      https://github.com/antirez/redis/commit/fdf9d455098f54f7666c702ae464e6ea21e25411
      
8	系统安全保护
    8.1	配置数据库的最大连接数
    Redis的maxclients决定了最大并发连接数，默认最大连接数为10000，应该根据实际场景配置合适的连接数。配置项:maxclients 500
    8.2	配置连接闲置超时
    为避免空闲连接长时间占用资源，可在redis.conf配置闲置超时:timeout 3600
    8.3	配置最大内存
    为避免系统内存被耗尽,需要进行内存限制:maxmemory 1024m

9	其它高可靠相关改进
    新增功能设置主只读接口,提高倒换可靠性。
    2.8版本BUG:主备下执行一半事务，触发倒换可能导致数据不一致。 exec not allowwed in master-read-only or slave-read-only; expect multi/discard
    说明:Redis2.8以上支持增量半同步，老版本不支持。


